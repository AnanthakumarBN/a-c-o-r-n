<?xml version="1.0" encoding="UTF-8"?>
<project name="acorn-ant" default="default" basedir=".">
    <description>Ant script</description>
    <property file="local-individual.properties" />
    <!--<property name="local-root-dir" value="../../${local-root-name}" />-->
    <!--<property name="local-root-dir" value=".." />-->
    <property name="local-root-dir" value="${local-root-name}" />
    <property name="local-db-dir" value="${local-root-dir}/acorn-db" />

    <property name="vaapp-dir" value="${local-root-dir}/VisualAcornApplication" />
    <property name="wsclient-dir" value="${local-root-dir}/AcornWSClient" />
    <property name="wsclient-jax-ws-dir" value="${wsclient-dir}/nbproject" />

    <property name="wsclient-local-jax-ws" value="local-jax-ws.xml" />
    <property name="wsclient-local-jaxws-build" value="local-jaxws-build.xml" />

    <property name="wsclient-server-jax-ws" value="server-jax-ws.xml" />
    <property name="wsclient-server-jaxws-build" value="server-jaxws-build.xml" />

    <property name="local-web-dir" value="${local-root-dir}/acorn-0.3" />
    <property name="local-WS-dir" value="${local-root-dir}/AcornWS" />
    <property name="local-worker-dir" value="${local-root-dir}/acorn-worker" />
    <property name="local-amkfba-dir" value="${local-root-dir}/jwlfba" />
    <property name="local-amkfba-run" value="${local-amkfba-dir}/jwlfba" />
    <property name="local-jwlfba-dir" value="${local-root-dir}/jwlfba" />
    <property name="local-jwlfba-run" value="${local-jwlfba-dir}/jwlfba" />
    <property name="local-web-name" value="acorn-0.3.war" />
    <property name="local-web-file" value="${local-web-dir}/dist/${local-web-name}" />
    <property name="local-worker-name" value="acorn-worker.jar" />
    <property name="local-WS-name" value="AcornWSApplication.jar" />
    <property name="local-worker-file" value="${local-worker-dir}/dist/${local-worker-name}" />
    <property name="local-WS-file" value="${local-WS-dir}/dist/${local-WS-name}" />
    <property name="local-db-name" value="acorn-db.jar" />
    <property name="local-db-file" value="${local-db-dir}/dist/${local-db-name}" />
    <property name="local-glassfish-asadmin" value="${local-glassfish-home}/bin/asadmin${local-script-extension}" />
    <property name="local-db-persistence" value="local-db-persistence.xml" />
    <property name="local-worker-persistence" value="local-worker-persistence.xml" />
    <property name="local-worker-properties" value="local-worker-project.properties" />
    <property name="local-acornConfig" value="local-acornConfig.xml" />
    <property name="server-db-persistence" value="server-db-persistence.xml" />
    <property name="server-worker-persistence" value="server-worker-persistence.xml" />
    <property name="server-worker-jars-dir" value="${local-worker-dir}/dist/lib" />
    <!--property name="server-name" value="sysbio1.sbs.surrey.ac.uk" /-->
    <!--<propetry name="server-adminpassfile" value=".adminpassfile" /> -->
    <property name="server-root-name" value="acorn" />
    <property name="server-root-dir" value="/usr/local/${server-root-name}" />
    <property name="server-web-dir" value="${server-root-dir}/acorn-0.3" />
    <property name="server-WS-dir" value="${server-root-dir}/acorn-webservice" />
    <property name="server-web-name" value="acorn-0.3.war" />
    <property name="server-jnlpclient-name" value="visualacornapplication.war" />
    <property name="server-WS-name" value="AcornWSApplication.jar" />
    <property name="server-web-undeploy-name" value="acorn-0.3" />
    <property name="server-WS-undeploy-name" value="AcornWSApplication" />
    <property name="file-to-asadmin-pass" value="/usr/local/acorn/.glassfishpassfile"/>
    <property name="server-web-file" value="${server-web-dir}/${server-web-name}" />
    <property name="server-WS-file" value="${server-WS-dir}/${server-WS-name}" />
    <property name="server-worker-dir" value="${server-root-dir}/acorn-worker" />
    <property name="server-jnlpclient-dir" value="${server-root-dir}/jnlpclient" />
    <property name="server-jnlp-file" value="${server-jnlpclient-dir}/visualacornapplication.war" />
    <property name="server-worker-name" value="acorn-worker.jar" />
    <property name="server-worker-file" value="${server-worker-dir}/${server-worker-name}" />
    <property name="server-worker-properties" value="server-worker-project.properties" />
    <property name="server-acornConfig" value="server-acornConfig.xml" />
    <property name="server-amkfba-dir" value="${server-root-dir}/amkfba" />
    <property name="server-amkfba-run" value="${server-amkfba-dir}/amkfba" />
    <property name="server-jwlfba-dir" value="${server-root-dir}/jwlfba" />
    <property name="server-jwlfba-run" value="${server-jwlfba-dir}/jwlfba" />
    <property name="server-glassfish-home" value="/usr/local/glassfishv3" />
    <property name="server-glassfish-asadmin" value="${server-glassfish-home}/bin/asadmin" />
    <property name="server-domain-name" value="domain1" />
    <property name="server-domain-dir" value="${server-glassfish-home}/glassfish/domains/${server-domain-name}" />
    <property name="server-worker-log-file" value="${server-root-dir}/worker.log" />
    <property name="server-db-driver" value="com.mysql.jdbc.Driver" />
    <property name="server-db-url" value="jdbc:mysql://localhost:3306/acorn-db" />
    <property name="server-iiport" value="3700" />
    <property name="server-java" value="/usr/java/jdk1.6.0_10/bin/java" />
    <property name="server-mysql-connector" value="${server-root-dir}/mysql-connector/mysql-connector-5.0.7-bin.jar" />
    
    <target name="save-server-db-auth" unless="server-db-password">
        <input addproperty="server-db-username" message="Enter server database username: " />
        <input addproperty="server-db-password" message="Enter server database password: " />
        <echo file="${local-server-db-username-file}" message="${server-db-username}" />
        <echo file="${local-server-db-password-file}" message="${server-db-password}" />
    </target>
    <target name="get-server-db-auth" unless="server-db-password" >
        <loadfile property="server-db-username" srcfile="${local-server-db-username-file}" failonerror="false"/>
        <loadfile property="server-db-password" srcfile="${local-server-db-password-file}" failonerror="false"/>
        <antcall target="save-server-db-auth" />
        <loadfile property="server-db-username" srcfile="${local-server-db-username-file}" failonerror="false"/>
        <loadfile property="server-db-password" srcfile="${local-server-db-password-file}" failonerror="false" />
    </target>
    
   <!--odkomentuj ponizsze (a zakomentuj odkomentowana o tej samej nazwie)
   jezeli nie chcesz przechowywac danych o dostepie do bazy na dysku lokalnym
   wtedy przy kazdym uruchomieniu workera system zapyta Cie o te dane
   -->
   <!-- 
   <target name="get-server-db-auth" unless="server-db-password" >
        <input addproperty="server-db-username" message="Enter server database username: " />
        <input addproperty="server-db-password" message="Enter server database password: " />
   </target>
   -->

   <!--odkomentuj ponizsze (a zakomentuj odkomentowana o tej samej nazwie) 
   jezeli nie chcesz przechowywac danych o dostepie do bazy na dysku lokalnym
   wtedy przy kazdym uruchomieniu workera system zapyta Cie o te dane
   -->        
   <!--
   <target name="get-server-auth" unless="server-password" >
        <input addproperty="server-username" message="Enter server username: " />
        <input addproperty="server-password" message="Enter server password: " />
   </target>
   -->
    <target name="save-server-auth" unless="server-password">
        <input addproperty="server-username" message="Enter server username: " />
        <input addproperty="server-password" message="Enter server password: " />
        <echo file="${local-server-username-file}" message="${server-username}" />
        <echo file="${local-server-password-file}" message="${server-password}" />
    </target>
    <target name="get-server-auth" unless="server-password" >
        <loadfile property="server-username" srcfile="${local-server-username-file}" failonerror="false"/>
        <loadfile property="server-password" srcfile="${local-server-password-file}" failonerror="false"/>
        <antcall target="save-server-auth" />
        <loadfile property="server-username" srcfile="${local-server-username-file}" failonerror="false"/>
        <loadfile property="server-password" srcfile="${local-server-password-file}" failonerror="false" />
    </target>
    <target name="archive-project" depends="local-clean-all" >
        <zip destfile="trunk.zip"
        basedir="${local-root-dir}"
        />
    </target>
    <target name="local-db-compile" depends="local-db-clean">
        <antcall target="swap-to-local-db" />
        <ant antfile="${local-db-dir}/build.xml" target="jar" inheritall="false" />
    </target>
    <target name="local-db-clean" >
        <ant antfile="${local-db-dir}/build.xml" target="clean" inheritall="false" />
        <antcall target="swap-to-local-db" />
    </target>
    <target name="local" depends="local-copy-acorn-config, local-stop-domain, local-clean-all"><!--local-create-resources-->
        <ant target="local-web-deploy"/>
    </target>
    <target name="local-web-compile" depends="local-web-clean, local-db-compile">
        <ant antfile="${local-web-dir}/build.xml" target="dist" inheritall="false" />
    </target>
    <target name="local-web-clean" >
        <ant antfile="${local-web-dir}/nbproject/ant-deploy.xml" target="-undeploy-ant" inheritall="false"/>
        <ant antfile="${local-web-dir}/build.xml" target="clean" inheritall="false" />
    </target>
    <target name="local-web-deploy-all" depends="local-web-compile" description="Deploy acorn on localhost">
        <ant target="local-web-deploy"/>
    </target>
    <target name="local-web-deploy" description="Deploy acorn on localhost">
        <ant antfile="${local-web-dir}/build.xml" target="run" inheritall="false" />
    </target>
    <target name="local-copy-acorn-config" >
        <copy overwrite="true" file="${local-acornConfig}" tofile="${local-glassfish-home}/glassfish/domains/${local-domain-name}/acornConfig.xml" />
        <copy overwrite="true" file="${local-acornConfig}" tofile="${local-glassfish-home}/glassfish/domains/${local-domain-name}/config/acornConfig.xml" />
    </target>
    <target name="local-start-domain" >
        <exec command="${local-glassfish-asadmin} start-domain ${local-domain-name}" />
    </target>
    <target name="local-stop-domain" >
        <exec command="${local-glassfish-asadmin} stop-domain ${local-domain-name}" />
    </target>
    <target name="server-web-compile" depends="get-server-auth, server-db-compile" description="Compile acorn to deploy on server" >
        <ant antfile="${local-web-dir}/build.xml" target="dist" inheritall="false" />
    </target>
    <target name="server-start-domain" depends="get-server-auth" >
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="${server-glassfish-asadmin} start-domain ${server-domain-name}"
                verbose="true"/>
    </target>
    <target name="server-stop-domain" depends="get-server-auth" >
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="${server-glassfish-asadmin} stop-domain ${server-domain-name}"
                verbose="true"/>
    </target>
    <target name="local-create-resources" depends="local-create-apass-file">
        <exec executable="${local-glassfish-asadmin}" failonerror="">
            <arg value="create-jms-resource"/>
            <arg value="--restype"/>
            <arg value="javax.jms.QueueConnectionFactory"/>
            <arg value="--user"/>
            <arg value="admin"/>
            <arg value="--passwordfile"/>
            <arg value="${local-domain-passwordfile}"/>
            <arg value="--property"/>
            <arg value="imqConsumerFlowLimit=1"/>
            <arg value="jms/taskQueueFactory"/>
        </exec>
        <exec executable="${local-glassfish-asadmin}" failonerror="">
            <arg value="create-jms-resource"/>
            <arg value="--user"/>
            <arg value="admin"/>
            <arg value="--passwordfile"/>
            <arg value="${local-domain-passwordfile}"/>
            <arg value="--restype"/>
            <arg value="javax.jms.Queue"/>
            <arg value="jms/taskQueue"/>
        </exec>
    </target>
    <target name="local-delete-resources"  depends="local-create-apass-file">
        <exec executable="${local-glassfish-asadmin}" failonerror="">
            <arg value="delete-jms-resource"/>
            <arg value="--user"/>
            <arg value="admin"/>
            <arg value="--passwordfile"/>
            <arg value="${local-domain-passwordfile}"/>
            <arg value="jms/taskQueueFactory"/>
        </exec>
        <exec command="${local-glassfish-asadmin}" failonerror="">
            <arg value="delete-jms-resource"/>
            <arg value="--user"/>
            <arg value="admin"/>
            <arg value="--passwordfile"/>
            <arg value="${local-domain-passwordfile}"/>
            <arg value="jms/taskQueue"/>
        </exec>
    </target>
    <target name="server-web-deploy" description="Deploy acorn on server" depends="get-server-auth">
        <sshexec
            trust="true"
            password="${server-password}" 
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} deploy --user admin --passwordfile ${file-to-asadmin-pass} ${server-web-file}"
            failonerror=""
        />
    </target>
    <target name="server-web-deploy-all" depends="get-server-auth, server-web-compile, server-web-undeploy, server-stop-domain, server-start-domain, copy-web-to-server" description="Do all to deploy acorn on server">
        <antcall target="server-web-deploy" />
        <antcall target="vaapp-prepapare-and-install-server-distro" />
    </target>
    <target name="server-web-deploy-all-withoutVAAP" depends="get-server-auth, server-web-compile, server-web-undeploy, server-stop-domain, server-start-domain, copy-web-to-server" description="Do all to deploy acorn on server">
        <antcall target="server-web-deploy" />
    </target>
    <target name="server-web-undeploy" depends="get-server-auth">
        <sshexec
            trust="true"
            password="${server-password}"
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} undeploy --user admin --passwordfile ${file-to-asadmin-pass} ${server-web-undeploy-name}"
            failonerror=""
        />
    </target>
    <target name="server-create-resources" depends="get-server-auth">
        <sshexec
            trust="true"
            password="${server-password}" 
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} create-jms-resource --restype javax.jms.QueueConnectionFactory --property imqConsumerFlowLimit=1 --user admin --passwordfile ~/.adminpass jms/taskQueueFactory"
            failonerror=""
        />
        <sshexec
            trust="true"
            password="${server-password}" 
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} create-jms-resource --restype javax.jms.Queue jms/taskQueue" 
            failonerror=""
        />
    </target>
    <target name="server-delete-resources" depends="get-server-auth">
        <sshexec
            trust="true"
            password="${server-password}" 
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} delete-jms-resource jms/taskQueueFactory" 
            failonerror=""/>
        <esshxec
            password="${server-password}" 
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} delete-jms-resource jms/taskQueue" 
            failonerror=""
        />
    </target>
    <target name="local-worker-run" description="Run worker on localhost">
        <java classname="acorn.worker.main.Main"
              classpath="${local-glassfish-home}/glassfish/modules/gf-client.jar:${local-worker-file}"
              jvmargs="-Dtoplink.jdbc.user=${local-db-username} 
                -Dtoplink.jdbc.password=${local-db-password}
                -Dacorn.worker.logfile=${local-worker-log-file}
                -Dacorn.worker.dumpFile=${local-worker-debug}
                -Dacorn.worker.amkfbaPath=${local-jwlfba-run}
                -Dorg.omg.CORBA.ORBInitialPort=${local-iiport}"
        />
    </target>
    <target name="local-worker-run-all" depends="local-worker-compile" description="Compile and run worker on localhost">
        <ant target="local-worker-run" />
    </target>
    <target name="server-copy-acorn-config" depends="get-server-auth">
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${server-acornConfig}"
            todir="${server-username}:${server-password}@${server-name}:${server-domain-dir}/config/acornConfig.xml"
          />
    </target>
    
    <target name="local-create-apass-file">
        <touch file="${local-domain-dir}/.aspass" />
        <concat destfile="${local-domain-dir}/.aspass">AS_ADMIN_PASSWORD=adminadmin
        </concat>
    </target>
    <target name="local-worker-compile" depends="local-worker-clean">
        <antcall target="swap-to-local-worker" />
        <ant antfile="${local-worker-dir}/build.xml" target="jar" inheritall="false" />
    </target>
    <target name="local-worker-clean" >
        <ant antfile="${local-worker-dir}/build.xml" target="clean" inheritall="false" />
        <antcall target="swap-to-local-worker" />
    </target>
    <target name="local-clean-all" depends="local-web-clean, local-worker-clean, local-db-clean" description="Clean all">
    </target>
    <target name="swap-to-local-db">
        <copy overwrite="true" file="${local-db-persistence}" tofile="${local-db-dir}/src/META-INF/persistence.xml"/>
    </target>
    <target name="swap-to-local-worker">
        <copy overwrite="true" file="${local-worker-properties}" tofile="${local-worker-dir}/nbproject/project.properties"/>
        <!--<copy overwrite="true" file="${local-worker-persistence}" tofile="${local-worker-dir}/src/META-INF/persistence.xml"/>-->
    </target>
    <target name="swap-to-server-db">
        <copy overwrite="true" file="${server-db-persistence}" tofile="${local-db-dir}/src/META-INF/persistence.xml"/>
    </target>
    <target name="swap-to-server-worker">
        <copy overwrite="true" file="${server-worker-properties}" tofile="${local-worker-dir}/nbproject/project.properties"/>
        <!--<copy overwrite="true" file="${server-worker-persistence}" tofile="${local-worker-dir}/src/META-INF/persistence.xml"/>-->
    </target>
    <target name="server-worker-compile" depends="local-worker-clean">
        <antcall target="swap-to-server-worker" />
        <ant antfile="${local-worker-dir}/build.xml" target="jar" inheritall="false" />
    </target>
    <target name="server-db-compile" depends="local-db-clean">
        <antcall target="swap-to-server-db" />
        <ant antfile="${local-db-dir}/build.xml" target="jar" inheritall="false" />
    </target>
    <target name="local-worker-run-nb" depends="local-worker-compile">
        <ant antfile="${local-worker-dir}/build.xml" target="run" inheritall="false" />
    </target>
    <target name="server-worker-run-nb" depends="server-worker-compile">
        <ant antfile="${local-worker-dir}/build.xml" target="run" inheritall="false" />
    </target>
    <target name="remove-web-from-server" depends="get-server-auth">
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="rm -f ${server-web-file}"
                verbose="true"/>
    </target>
    <target name="copy-web-to-server" depends="get-server-auth">
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${local-web-file}"
            todir="${server-username}:${server-password}@${server-name}:${server-web-dir}"
          />
    </target>
    <target name="remove-worker-from-server" depends="get-server-auth">
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="rm -f ${server-worker-file}"
                verbose="true"/>
    </target>
    <target name="copy-worker-to-server" depends="get-server-auth, copy-libs-to-server, copy-db-to-server">
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${local-worker-file}"
            todir="${server-username}:${server-password}@${server-name}:${server-worker-dir}"
          />
    </target>
    <target name="copy-libs-to-server" depends="get-server-auth">
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            todir="${server-username}:${server-password}@${server-name}:${server-worker-dir}/lib/"
          >
            <fileset dir="${server-worker-jars-dir}" includes="*.jar"/>
        </scp>
    </target>
    <target name="copy-db-to-server" depends="get-server-auth">
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${local-db-file}"
            todir="${server-username}:${server-password}@${server-name}:${server-worker-dir}/lib/"
          />
    </target>
    <target name="server-worker-run-all" depends="get-server-auth, get-server-db-auth, server-worker-compile, copy-worker-to-server" description="Do all to run worker on server">
        <antcall target="server-worker-run" />
    </target>
    <target name="server-worker-run" depends="get-server-auth, get-server-db-auth" description="Run worker on server">
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="${server-java} -jar
                -Dtoplink.jdbc.user=${server-db-username}
                -Dtoplink.jdbc.password=${server-db-password}
                -Dtoplink.jdbc.url=${server-db-url}
                -Dtoplink.jdbc.driver=${server-db-driver}
                -Dacorn.worker.logfile=${server-worker-log-file}
                -Dacorn.worker.amkfbaPath=${server-jwlfba-run}
                -Dorg.omg.CORBA.ORBInitialPort=${server-iiport} ${server-worker-file}"
                verbose="true">
        </sshexec>
    </target>

    <target name="local-worker-on-server-run" depends="get-server-auth, get-server-db-auth" description="Run worker locally to compute server task">
        <java jar="${local-worker-file}"
              jvmargs="-Dtoplink.jdbc.user=${server-db-username}
                -Dtoplink.jdbc.password=${server-db-password}
                -Dtoplink.jdbc.url=${server-true-db-url}
                -Dtoplink.jdbc.driver=${server-db-driver}
                -Dacorn.worker.logfile=${local-worker-log-file}
                -Dacorn.worker.amkfbaPath=${local-jwlfba-run}
                -Dorg.omg.CORBA.ORBInitialPort=${server-iiport}"
        />
    </target>

    <target name="local-amkfba-compile">
        <exec dir="${local-amkfba-dir}" executable="${local-make}">
            <arg value="Makefile"/>
            <arg value="all"/>
        </exec>
    </target>
    <target name="local-amkfba-clean">
        <exec dir="${local-amkfba-dir}" executable="${local-make}">
            <arg value="Makefile"/>
            <arg value="clean"/>
        </exec>
    </target>

    <target name="local-jwlfba-compile">
        <exec dir="${local-jwlfba-dir}" executable="${local-make}">
            <arg value="Makefile"/>
            <arg value="all"/>
        </exec>
    </target>
    <target name="local-jwlfba-clean">
        <exec dir="${local-jwlfba-dir}" executable="${local-make}">
            <arg value="Makefile"/>
            <arg value="clean"/>
        </exec>
    </target>

    <target name="server-kill-all-workers" depends="get-server-auth">
        <sshexec
                trust="true"
                password="${server-password}" 
                username="${server-username}"
                host="${server-name}"
                command="kill -9 `ps -ef | grep Dtoplink.jdbc.url=jdbc:mysql://localhost:3306/acorn | grep -v grep | awk '{print $2}'`"
                verbose="true">
        </sshexec>
    </target>

    <target name="wsclient-copy-local-jar-to-module">
        <ant target="-wsclient-swap-local-configs"/>
        <ant antfile="${wsclient-dir}/build.xml" target="clean" inheritall="false"/>
        <ant antfile="${wsclient-dir}/build.xml" target="copy-jar-to-ws-client-module" inheritall="false" />
    </target>

    <target name="wsclient-copy-server-jar-to-module">
        <ant target="-wsclient-swap-server-configs"/>
        <ant antfile="${wsclient-dir}/build.xml" target="clean" inheritall="false"/>
        <ant antfile="${wsclient-dir}/build.xml" target="copy-jar-to-ws-client-module" inheritall="false" />
    </target>
    <target name="-wsclient-swap-local-configs" >
        <copy overwrite="true" file="${wsclient-local-jax-ws}" tofile="${wsclient-jax-ws-dir}/jax-ws.xml" verbose="true"/>
        <copy overwrite="true" file="${wsclient-local-jaxws-build}" tofile="${wsclient-jax-ws-dir}/jaxws-build.xml" verbose="true"/>
    </target>

    <target name="-wsclient-swap-server-configs" >
        <copy overwrite="true" file="${wsclient-server-jax-ws}" tofile="${wsclient-jax-ws-dir}/jax-ws.xml" verbose="true"/>
        <copy overwrite="true" file="${wsclient-server-jaxws-build}" tofile="${wsclient-jax-ws-dir}/jaxws-build.xml" verbose="true"/>
    </target>

    <target name="vaapp-run-all-on-local-server">
        <ant target="wsclient-copy-local-jar-to-module"/>
        <ant target="-vaapp-build-and-run"/>
    </target>
    <target name="vaapp-run-all-on-sysbio-server">
        <ant target="wsclient-copy-server-jar-to-module"/>
        <ant target="-vaapp-build-and-run"/>
    </target>
    <target name="-vaapp-build-and-run">
        <ant antfile="${vaapp-dir}/build.xml" target="clean" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="build" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="run" inheritall="false"/>
    </target>
    <target name="vaapp-run">
        <ant antfile="${vaapp-dir}/build.xml" target="run" inheritall="false"/>
    </target>
    <target name="vaapp-prepapare-and-install-server-distro" depends="get-server-auth, wsclient-copy-server-jar-to-module">
        <ant antfile="${vaapp-dir}/build.xml" target="clean" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="build" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="build-jnlp" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="build-zip" inheritall="false"/>
        <ant antfile="${vaapp-dir}/build.xml" target="build-mac" inheritall="false"/>
        <zip destfile="${vaapp-dir}/dist/visualacornapplication.app.zip" basedir="${vaapp-dir}/dist/visualacornapplication.app" />
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${vaapp-dir}/dist/visualacornapplication.war"
            todir="${server-username}:${server-password}@${server-name}:${server-jnlpclient-dir}"
          />
        <sshexec
            trust="true"
            password="${server-password}"
            username="${server-username}"
            host="${server-name}"
            command="${server-glassfish-asadmin} deploy --user admin --passwordfile ${file-to-asadmin-pass} ${server-jnlp-file}"
            failonerror=""
          />
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${vaapp-dir}/dist/visualacornapplication.zip"
            todir="${server-username}:${server-password}@${server-name}:${server-domain-dir}/applications/j2ee-modules/visualacornapplication"
          />
        <scp
            trust="true"
            host="${server-name}"
            username="${server-username}"
            password="${server-password}"
            verbose="true"
            file="${vaapp-dir}/dist/visualacornapplication.app.zip"
            todir="${server-username}:${server-password}@${server-name}:${server-domain-dir}/applications/j2ee-modules/visualacornapplication"
          />
    </target>
</project>
